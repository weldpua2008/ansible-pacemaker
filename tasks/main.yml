---
- name: Ensure cluster group membership
  fail: msg="Cluster hosts must be members of a group"
  when: pacemaker_ansible_group is not iterable
  tags:
    - verify

- name: Install Pacemaker Configuration System package
  package: name={{ item }} state=present
  with_items: "{{ pacemaker_packages }}"
  tags:
    - setup

- name: Enable and start PCS daemon
  service: name=pcsd enabled=yes state=started
  tags:
    - setup

- name: Create cluster system group
  group: name={{ pacemaker_group }} state=present
  tags:
    - setup

- name: Create cluster system user
  user:
    name={{ pacemaker_user }}
    password={{ pacemaker_password | password_hash('sha512', ansible_hostname) }}
    groups={{ pacemaker_group }} comment="HA Cluster Administrator"
  tags:
    - setup

- name: Check if /etc/corosync/corosync.conf exists
  stat: path=/etc/corosync/corosync.conf
  register: corosync_conf_exists
  tags:
    - setup

- name: Delete previous /etc/cluster/cluster.conf
  file: path=/etc/corosync/corosync.conf state=absent force=yes
  when: corosync_conf_exists.stat.exists == true
  ignore_errors: yes
  tags:
    - setup

- name: Authenticate all nodes
  command: >
    pcs cluster auth
    {% for host in groups[pacemaker_ansible_group] %}
    {{ hostvars[host]['ansible_hostname'] }}
    {% endfor %}
    -u {{ pacemaker_user }} -p {{ pacemaker_password }}
  run_once: true
  args:
    creates: /var/lib/pcsd/tokens
  tags:
    - setup

# There is a bug here I think. on Centos 7 both files not exists and on ubuntu 16 the src file not exists
- name: Re-use same key for Corosync as in use for pcs
  file: src=/var/lib/pcsd/pcsd.crt dest=/etc/corosync/authkey state=link force=yes
  tags:
    - setup

- name: Setup cluster message bus with multicast support
  run_once: true
  command: >
    pcs cluster setup --name {{ pacemaker_cluster_name }}
    {% for host in groups[pacemaker_ansible_group] %}
    {{ hostvars[host]['ansible_hostname'] }}
    {% endfor %} --force --transport=udp --addr0={{ pacemaker_corosync_mcastaddr }} --mcast0={{ pacemaker_corosync_mcastaddr }}
  args:
    creates: /etc/corosync/corosync.conf
  when: pacemaker_corosync_mcastaddr is defined
  tags:
    - setup

- name: Setup cluster message bus without multicast support
  run_once: true
  command: >
    pcs cluster setup --name {{ pacemaker_cluster_name }}
    {% for host in groups[pacemaker_ansible_group] %}
    {{ hostvars[host]['ansible_hostname'] }}
    {% endfor %} --force --transport=udpu
  args:
    creates: /etc/corosync/corosync.conf
  when: pacemaker_corosync_mcastaddr is not defined
  tags:
    - setup

- name: Creates corosync config
  template:
    src: corosync.conf.j2
    dest: /etc/corosync/corosync.conf
    mode: 0400
    owner: root
    force: yes
    # notify: Restart corosync
    tags:
      - setup

- name: Start all cluster nodes
  service: name={{ item }} enabled=yes state=restarted
  with_items:
    - pacemaker
    - corosync
  ignore_errors: true
  tags:
    - setup

- name: Check if path exists pacemaker_resource.d
  stat: path={{ pacemaker_resource_d }}
  register: path
  tags:
    - verify

- name: Create folder for Cloudera CM Agent
  file: path={{ pacemaker_resource_d }}/cm state=directory owner=root group=root
  when: path.stat.exists == true
  tags:
    - setup

- name: Install Agent for HAProxy
  template:
    src: resource.d/haproxy.j2
    dest: "{{ pacemaker_resource_d }}/heartbeat/haproxy"
    mode: 0770
    owner: root
    force: yes
  tags:
    - deploy

- name: Install Agent for IFmon
  template:
    src: resource.d/IFmon.j2
    dest: "{{ pacemaker_resource_d }}/heartbeat/IFmon"
    mode: 0770
    owner: root
    force: yes
  tags:
    - deploy

- name: Install Agent for CM - All linux distribution
  template:
    src: resource.d/cm.agent.linux.j2
    dest: "{{ pacemaker_resource_d }}/cm/agent"
    mode: 0770
    owner: root
    force: yes
  when: not (ansible_distribution == "CentOS" and ansible_distribution_major_version == "7")
  tags:
    - deploy

- name: Install Agent for CM - CentOS 7
  template:
    src: resource.d/cm.agent.el7.j2
    dest: "{{ pacemaker_resource_d }}/cm/agent"
    mode: 0770
    owner: root
    force: yes
  when: (ansible_distribution == "CentOS" and ansible_distribution_major_version == "7")
  tags:
    - deploy

- name: Resource Debug Utility - CentOS 6/7 and Ubuntu 16
  copy:
    src: resource_debug
    dest: "/usr/sbin/resource_debug"
    mode: 0777
    owner: root
    force: yes
  tags:
    - deploy

- name: Waiting until cluster properly starts....
  pause:
    seconds: 15
  tags:
    - deploy

- name: Set cluster general settings
  run_once: true
  command: pcs resource defaults {{ item.key | replace('_', '-') }}={{ item.value }}
  with_dict: "{{ pacemaker_general_configuration }}"
  when: pacemaker_general_configuration is defined
  register: task_result
  until: task_result.rc == 0
  retries: 3
  delay: 1
  ignore_errors: yes
  tags:
    - configure

- name: Set cluster properties
  run_once: true
  command: pcs property set {{ item.key | replace('_', '-') }}={{ item.value }}
  with_dict: "{{ pacemaker_properties }}"
  when: pacemaker_properties is defined
  tags:
    - configure

- name: Clear previous resources if exist
  run_once: true
  when: pacemaker_resources is defined
  with_items: "{{ pacemaker_resources }}"
  shell: >
    pcs resource delete {{ item.id }} || true;
    pcs constraint order remove {{ item.id }} || true
  tags:
    - configure

- name: Clear previous bindings resources if exist
  run_once: true
  when: pacemaker_resources_bundling is defined
  with_items: "{{ pacemaker_resources_bundling }}"
  shell: >
    pcs constraint colocation remove {{ item.id }} || true;
    pcs constraint order remove {{ item.id }} || true
  tags:
    - configure

- name: Create pacemaker resources
  run_once: true
  when: pacemaker_resources is defined
  with_items: "{{ pacemaker_resources }}"
  command: >
    pcs resource create {{ item.id }} {{ item.type }}
    {% if item.options is defined %}
      {% for opt, value in item.options.iteritems() %}
        {{ opt }}={{ value }}
      {% endfor %}
    {% endif %}
    {% if item.op is defined %}
      op
      {% for op in item.op %}
        {{ op.action }}
        {% for opt, value in op.options.iteritems() %}
          {{ opt }}={{ value }}
        {% endfor %}
      {% endfor %}
    {% endif %}
    {% if item.meta is defined %}
      meta {{ item.meta.id }}
      {% if item.meta.options is defined %}
        {% for opt, value in item.meta.options.iteritems() %}
          {{ opt }}={{ value }}
        {% endfor %}
      {% endif %}
    {% endif %}
    {% if item.clone is defined %}
      {% if item.clone %} --clone {% endif %}
    {% elif item.masterslave is defined %}
      --master
      {% if item.masterslave.name is defined %}
        {{ item.masterslave.name }}
      {% endif %}
    {% endif %}
    {% if item.group is defined %}
      --group {{ item.group.name }}
      {% if item.group.before is defined %}
        --before {{ item.group.before }}
      {% elif item.group.after is defined %}
        --after {{ item.group.after }}
      {% endif %}
    {% endif %}
    {% if item.disabled is defined %}
      {% if item.disabled %} --disabled {% endif %}
    {% endif %}
    {% if item.wait is defined %}
      wait={{ item.wait }}
    {% endif %}
    {% if item.add_force is defined and item.add_force %}
      --force
    {% endif %}
  register: task_result
  until: task_result.rc == 0
  retries: 2
  delay: 5
  tags:
    - configure

- name: Clear previous failcounter if exist
  run_once: true
  when: pacemaker_resources is defined
  with_items: "{{ pacemaker_resources }}"
  shell: >
    pcs resource cleanup {{ item.id }} || true
  tags:
    - configure

- name: Create resources bundling - Order
  run_once: true
  when: pacemaker_resources_bundling_order is defined
  with_items: "{{ pacemaker_resources_bundling_order }}"
  command: >
    pcs constraint order {{ item.id }} then
    {% if item.resources is defined %}
      {% for opt in item.resources %}
        {{ opt }}
      {% endfor %}
    {% endif %}
  tags:
    - configure

- name: Create resources bundling - Colocation
  run_once: true
  when: pacemaker_resources_bundling is defined
  with_items: "{{ pacemaker_resources_bundling }}"
  command: >
    pcs constraint colocation add {{ item.id }}
    {% if item.resources is defined %}
      {% for opt in item.resources %}
        {{ opt }}
      {% endfor %}
    {% endif %} {{ item.type }}
  tags:
    - configure
